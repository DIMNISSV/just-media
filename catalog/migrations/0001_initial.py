# Generated by Django 5.2 on 2025-04-22 14:19

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Genre',
                'verbose_name_plural': 'Genres',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(help_text="Short identifier for the source (e.g., 'kodik')", unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Source',
                'verbose_name_plural': 'Sources',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MediaItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('original_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Original Title')),
                ('media_type', models.CharField(choices=[('movie', 'Movie'), ('tv_show', 'TV Show'), ('anime_series', 'Anime Series'), ('cartoon', 'Cartoon'), ('documentary', 'Documentary'), ('foreign-movie', 'Foreign Movie (Kodik)'), ('soviet-cartoon', 'Soviet Cartoon (Kodik)'), ('foreign-cartoon', 'Foreign Cartoon (Kodik)'), ('russian-cartoon', 'Russian Cartoon (Kodik)'), ('anime', 'Anime (Kodik)'), ('russian-movie', 'Russian Movie (Kodik)'), ('cartoon-serial', 'Cartoon Serial (Kodik)'), ('documentary-serial', 'Documentary Serial (Kodik)'), ('russian-serial', 'Russian Serial (Kodik)'), ('foreign-serial', 'Foreign Serial (Kodik)'), ('anime-serial', 'Anime Serial (Kodik)'), ('multi-part-film', 'Multi-part Film (Kodik)'), ('unknown', 'Unknown')], db_index=True, default='unknown', max_length=30, verbose_name='Media Type')),
                ('release_year', models.PositiveIntegerField(blank=True, db_index=True, null=True, verbose_name='Release Year')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('poster_url', models.URLField(blank=True, max_length=1024, null=True, verbose_name='Poster URL')),
                ('kinopoisk_id', models.CharField(blank=True, db_index=True, max_length=20, null=True, unique=True, verbose_name='Kinopoisk ID')),
                ('imdb_id', models.CharField(blank=True, db_index=True, max_length=20, null=True, unique=True, verbose_name='IMDb ID')),
                ('shikimori_id', models.CharField(blank=True, db_index=True, max_length=20, null=True, unique=True, verbose_name='Shikimori ID')),
                ('mydramalist_id', models.CharField(blank=True, db_index=True, max_length=20, null=True, unique=True, verbose_name='MyDramaList ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('countries', models.ManyToManyField(blank=True, related_name='media_items', to='catalog.country', verbose_name='Countries')),
                ('genres', models.ManyToManyField(blank=True, related_name='media_items', to='catalog.genre', verbose_name='Genres')),
            ],
            options={
                'verbose_name': 'Media Item',
                'verbose_name_plural': 'Media Items',
                'ordering': ['-updated_at', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season_number', models.PositiveIntegerField(verbose_name='Season Number')),
                ('media_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='catalog.mediaitem', verbose_name='Media Item')),
            ],
            options={
                'verbose_name': 'Season',
                'verbose_name_plural': 'Seasons',
                'ordering': ['media_item', 'season_number'],
            },
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('episode_number', models.PositiveIntegerField(verbose_name='Episode Number')),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='episodes', to='catalog.season', verbose_name='Season')),
            ],
            options={
                'verbose_name': 'Episode',
                'verbose_name_plural': 'Episodes',
                'ordering': ['season', 'episode_number'],
            },
        ),
        migrations.CreateModel(
            name='MediaSourceLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_link', models.URLField(max_length=2048, verbose_name='Player Link')),
                ('translation_info', models.CharField(blank=True, help_text="Voiceover/subtitle info from the source (e.g., 'ColdFilm', 'Sub')", max_length=150, null=True, verbose_name='Translation Info')),
                ('quality_info', models.CharField(blank=True, help_text="Quality reported by the source (e.g., '720p', 'HDTVRip')", max_length=50, null=True, verbose_name='Quality Info')),
                ('source_specific_id', models.CharField(blank=True, db_index=True, help_text="ID of the content within the source system (e.g., 'movie-12345')", max_length=100, null=True, verbose_name='Source Specific ID')),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='Added At')),
                ('episode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='source_links', to='catalog.episode', verbose_name='Episode')),
                ('media_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='source_links', to='catalog.mediaitem', verbose_name='Media Item')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='catalog.source', verbose_name='Source')),
            ],
            options={
                'verbose_name': 'Media Source Link',
                'verbose_name_plural': 'Media Source Links',
                'ordering': ['-added_at'],
            },
        ),
        migrations.AddConstraint(
            model_name='mediaitem',
            constraint=models.UniqueConstraint(condition=models.Q(('kinopoisk_id__isnull', False)), fields=('kinopoisk_id',), name='unique_kinopoisk_id'),
        ),
        migrations.AddConstraint(
            model_name='mediaitem',
            constraint=models.UniqueConstraint(condition=models.Q(('imdb_id__isnull', False)), fields=('imdb_id',), name='unique_imdb_id'),
        ),
        migrations.AddConstraint(
            model_name='mediaitem',
            constraint=models.UniqueConstraint(condition=models.Q(('shikimori_id__isnull', False)), fields=('shikimori_id',), name='unique_shikimori_id'),
        ),
        migrations.AddConstraint(
            model_name='mediaitem',
            constraint=models.UniqueConstraint(condition=models.Q(('mydramalist_id__isnull', False)), fields=('mydramalist_id',), name='unique_mydramalist_id'),
        ),
        migrations.AlterUniqueTogether(
            name='season',
            unique_together={('media_item', 'season_number')},
        ),
        migrations.AlterUniqueTogether(
            name='episode',
            unique_together={('season', 'episode_number')},
        ),
        migrations.AlterUniqueTogether(
            name='mediasourcelink',
            unique_together={('source', 'player_link')},
        ),
    ]
